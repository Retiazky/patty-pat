{"language":"Solidity","sources":{"src/PatDAOMock.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {IPatDAO, Campaign, CampaingCreated, BuybackCreated, CampaignRemoved} from \"./interfaces/IPatDAO.sol\";\n\ncontract PatDAO is IPatDAO {\n    address public governanceSC;\n    mapping(address => Campaign) public campaigns;\n\n    error CampaignAlreadyCreated(address who, address token);\n\n    constructor(address GovernanceSC) {\n        governanceSC = GovernanceSC;\n    }\n\n    modifier onlyGovernance() {\n        require(\n            msg.sender == governanceSC,\n            \"PatDAO: Only Governance can call this function\"\n        );\n        _;\n    }\n\n    // modifier onlyTokenCreator() {\n    //     require(campaigns[msg.sender].status == true, \"PatDAO: Only Instructors can call this function\");\n    //     _;\n    // }\n\n    function createCampaign(\n        string memory name,\n        string memory symbol,\n        string memory uri,\n        address feeRecipient,\n        uint256 supply\n    ) public onlyGovernance {\n        // TODO: Implement\n        address token = address(0);\n        campaigns[token] = Campaign(name, symbol, uri, supply, feeRecipient);\n        emit CampaingCreated(name, symbol, uri, supply, token, feeRecipient);\n    }\n\n    function removeCampaign(address token) public onlyGovernance {\n        require(campaigns[token].supply > 0, \"PatDAO: Campaign does not exist\");\n        delete campaigns[token];\n    }\n\n    function createBuyback(\n        address token,\n        uint256 amountIn,\n        uint256 amountOut\n    ) public onlyGovernance {\n        // TODO: Implement\n        emit BuybackCreated(token, amountIn, amountOut);\n    }\n}\n"},"src/interfaces/IPatDAO.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nstruct Campaign {\n    string name;\n    string symbol;\n    string uri;\n    uint256 supply;\n    address feeRecipient;\n}\n\nevent CampaingCreated(\n    string name,\n    string symbol,\n    string uri,\n    uint256 supply,\n    address token,\n    address feeRecipient\n);\nevent CampaignRemoved(address token);\n\nevent BuybackCreated(address token, uint256 amountIn, uint256 amountOut);\n\ninterface IPatDAO {\n    function createCampaign(\n        string memory name,\n        string memory symbol,\n        string memory uri,\n        address feeRecipient,\n        uint256 supply\n    ) external;\n\n    function createBuyback(\n        address token,\n        uint256 amountIn,\n        uint256 amountOut\n    ) external;\n}\n"}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@v4-core/=lib/v4-core/src/","ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"useLiteralContent":false,"bytecodeHash":"ipfs","appendCBOR":true},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"]}},"evmVersion":"paris","viaIR":false,"libraries":{}}}
